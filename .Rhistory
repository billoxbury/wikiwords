nr <- 16
nc <- 32
hash <- lapply(1:nr, function(i) sample(1:nc, n, replace=TRUE))
sketch <- matrix(0, nrow=nr, ncol=nc)
for(s in S){
for(i in 1:nr){
j <- hash[[i]][s]
sketch[i,j] <- sketch[i,j] + 1
}
}
ct.est <- sapply(A, function(a)
min(
sapply(1:nr, function(i) sketch[i, hash[[i]][a]])
)
)
plot(ct.est ~ ct,
col='blue', frame.plot=0,
xlab="True count", ylab="Sketch estimate")
abline(0,1, col='grey')
nr <- 16
nc <- 256
hash <- lapply(1:nr, function(i) sample(1:nc, n, replace=TRUE))
sketch <- matrix(0, nrow=nr, ncol=nc)
for(s in S){
for(i in 1:nr){
j <- hash[[i]][s]
sketch[i,j] <- sketch[i,j] + 1
}
}
ct.est <- sapply(A, function(a)
min(
sapply(1:nr, function(i) sketch[i, hash[[i]][a]])
)
)
plot(ct.est ~ ct,
col='blue', frame.plot=0,
xlab="True count", ylab="Sketch estimate")
abline(0,1, col='grey')
hist(ct - ct.est)
hist(ct.est - ct)
hist(ct.est - ct, bins=20)
hist(ct.est - ct, breaks=20)
par(mfrow=c(2,1))
plot(ct.est ~ ct,
col='blue', frame.plot=0,
xlab="True count", ylab="Sketch estimate")
abline(0,1, col='grey')
hist(ct.est - ct, breaks=20, col='grey')
par(mfrow=c(2,1))
plot(ct.est ~ ct,
col='blue', frame.plot=0,
xlab="True count", ylab="Sketch estimate")
abline(0,1, col='grey')
hist(ct.est - ct, breaks=20, col='grey', main="Over-estimate")
nr <- 64
nc <- 256
hash <- lapply(1:nr, function(i) sample(1:nc, n, replace=TRUE))
sketch <- matrix(0, nrow=nr, ncol=nc)
for(s in S){
for(i in 1:nr){
j <- hash[[i]][s]
sketch[i,j] <- sketch[i,j] + 1
}
}
ct.est <- sapply(A, function(a)
min(
sapply(1:nr, function(i) sketch[i, hash[[i]][a]])
)
)
par(mfrow=c(2,1))
plot(ct.est ~ ct,
col='blue', frame.plot=0, cex=0.5,
xlab="True count", ylab="Sketch estimate")
abline(0,1, col='grey')
hist(ct.est - ct, breaks=20, col='grey',
xlab="Over-estimate", main="")
par(mfrow=c(1,1))
err <- ct.est - ct
par(mfrow=c(2,1))
plot(ct.est ~ ct,
col='blue', frame.plot=0, cex=0.5,
xlab="True count", ylab="Sketch estimate")
abline(0,1, col='grey')
hist(err, breaks=20, col='grey',
xlab="Over-estimate", main="")
err
err <- (ct.est - ct)/ct
par(mfrow=c(2,1))
plot(ct.est ~ ct,
col='blue', frame.plot=0, cex=0.5,
xlab="True count", ylab="Sketch estimate")
abline(0,1, col='grey')
hist(err, breaks=20, col='grey',
xlab="Over-estimate", main="")
par(mfrow=c(1,1))
err
hist(err, breaks=20, col='grey',
xlab="Over-estimate", main="")
max(err)
min(err)
min()
min(err)
ct
err <- (ct.est - ct)/ct
min(err)\
min(err)
max(err)
err
err <- (ct.est - ct)/mean(ct)
err
hist(err, breaks=20, col='grey',
xlab="Over-estimate", main="")
cdf(err)
cumsum(err)
plot(cumsum(err))
par(mfrow=c(2,1))
plot(ct.est ~ ct,
col='blue', frame.plot=0, cex=0.5,
xlab="True count", ylab="Sketch estimate")
abline(0,1, col='grey')
hist(err, breaks=20, col='grey',
xlab="Over-estimate", main="")
p
err
?hist
par(mfrow=c(2,1))
plot(ct.est ~ ct,
col='blue', frame.plot=0, cex=0.5,
xlab="True count", ylab="Sketch estimate")
abline(0,1, col='grey')
hist(err, breaks=20, col='grey', freq=FALSE,
xlab="Over-estimate", main="")
h <- hist(err, breaks=20, col='grey', freq=FALSE,
xlab="Over-estimate", main="")
par(mfrow=c(2,1))
plot(ct.est ~ ct,
col='blue', frame.plot=0, cex=0.5,
xlab="True count", ylab="Sketch estimate")
abline(0,1, col='grey')
h <- hist(err, breaks=20, col='grey', freq=FALSE,
xlab="Over-estimate", main="")
par(mfrow=c(1,1))
h
breaks <- seq(0,1,0.01)
par(mfrow=c(2,1))
plot(ct.est ~ ct,
col='blue', frame.plot=0, cex=0.5,
xlab="True count", ylab="Sketch estimate")
abline(0,1, col='grey')
breaks <- seq(0,1,0.01)
h <- hist(err, breaks=breaks, col='grey', freq=FALSE,
xlab="Over-estimate", main="")
h
h$density
sum(h$density * 0.01)
plot(h$density ~ breaks, type='h', col='blue', frame.plot=0, log='y')
h$density
breaks
breaks[1:-1]
plot(h$density ~ breaks[1:(length(breaks)-1)], type='h', col='blue', frame.plot=0, log='y')
par(mfrow=c(1,1))
plot(h$density ~ breaks[1:(length(breaks)-1)], type='h', col='blue', frame.plot=0, log='y')
plot(h$density ~ breaks[1:(length(breaks)-1)], type='h', col='blue', frame.plot=0, log='xy')
plot(h$density ~ breaks[1:(length(breaks)-1)], type='p', col='blue', frame.plot=0, log='xy')
par(mfrow=c(2,1))
plot(ct.est ~ ct,
col='blue', frame.plot=0, cex=0.5,
xlab="True count", ylab="Sketch estimate")
abline(0,1, col='grey')
meshsize <- 0.001
breaks <- seq(0,1,meshsize)
h <- hist(err, breaks=breaks, col='grey', freq=FALSE,
xlab="Over-estimate", main="")
par(mfrow=c(2,1))
plot(ct.est ~ ct,
col='blue', frame.plot=0, cex=0.5,
xlab="True count", ylab="Sketch estimate")
abline(0,1, col='grey')
meshsize <- 0.001
breaks <- seq(0,1,meshsize)
h <- hist(err, breaks=breaks, col='grey', freq=FALSE,
xlab="Over-estimate", main="")
par(mfrow=c(1,1))
plot(h$density ~ breaks[1:(length(breaks)-1)], type='p', col='blue', frame.plot=0, log='xy')
par(mfrow=c(2,1))
plot(ct.est ~ ct,
col='blue', frame.plot=0, cex=0.5,
xlab="True count", ylab="Sketch estimate")
abline(0,1, col='grey')
meshsize <- 0.01
breaks <- seq(0,1,meshsize)
h <- hist(err, breaks=breaks, col='grey', freq=FALSE,
xlab="Over-estimate", main="")
par(mfrow=c(1,1))
plot(h$density ~ breaks[1:(length(breaks)-1)], type='p', col='blue', frame.plot=0, log='xy')
nr <- 16
nc <- 64
hash <- lapply(1:nr, function(i) sample(1:nc, n, replace=TRUE))
sketch <- matrix(0, nrow=nr, ncol=nc)
for(s in S){
for(i in 1:nr){
j <- hash[[i]][s]
sketch[i,j] <- sketch[i,j] + 1
}
}
ct.est <- sapply(A, function(a)
min(
sapply(1:nr, function(i) sketch[i, hash[[i]][a]])
)
)
err <- (ct.est - ct)/mean(ct)
par(mfrow=c(2,1))
plot(ct.est ~ ct,
col='blue', frame.plot=0, cex=0.5,
xlab="True count", ylab="Sketch estimate")
abline(0,1, col='grey')
n <- 1000
A <- 1:n
P <- sort(rnorm(n)^2)
P <- P/sum(P)
T <- 1000000
S <- sample(A, T, replace=TRUE, prob=P)
ct <- sapply(A, function(a) sum(S==a))
plot(P*T ~ A,
type='h', col='grey',
xlab="Alphabet", ylab="Count",
xlim=c(0,n+0.5), frame.plot=0)
Ashift <- A + 0.5;
points(ct ~ Ashift,
type='h', col='blue', frame.plot=0)
nr <- 16
nc <- 64
hash <- lapply(1:nr, function(i) sample(1:nc, n, replace=TRUE))
sketch <- matrix(0, nrow=nr, ncol=nc)
for(s in S){
for(i in 1:nr){
j <- hash[[i]][s]
sketch[i,j] <- sketch[i,j] + 1
}
}
ct.est <- sapply(A, function(a)
min(
sapply(1:nr, function(i) sketch[i, hash[[i]][a]])
)
)
err <- (ct.est - ct)/mean(ct)
par(mfrow=c(2,1))
plot(ct.est ~ ct,
col='blue', frame.plot=0, cex=0.5,
xlab="True count", ylab="Sketch estimate")
abline(0,1, col='grey')
meshsize <- 0.01
breaks <- seq(0,1,meshsize)
h <- hist(err, breaks=breaks, col='grey', freq=FALSE,
xlab="Over-estimate", main="")
par(mfrow=c(1,1))
plot(h$density ~ breaks[1:(length(breaks)-1)], type='p', col='blue', frame.plot=0, log='xy')
ct.est <- sapply(A, function(a)
min(
sapply(1:nr, function(i) sketch[i, hash[[i]][a]])
)
)
err <- (ct.est - ct)/mean(ct)
par(mfrow=c(2,1))
plot(ct.est ~ ct,
col='blue', frame.plot=0, cex=0.5,
xlab="True count", ylab="Sketch estimate")
abline(0,1, col='grey')
meshsize <- 0.01
breaks <- seq(0,1,meshsize)
h <- hist(err, breaks=breaks, col='grey', freq=FALSE,
xlab="Over-estimate", main="")
par(mfrow=c(1,1))
plot(h$density ~ breaks[1:(length(breaks)-1)], type='p', col='blue', frame.plot=0)
par(mfrow=c(2,1))
plot(ct.est ~ ct,
col='blue', frame.plot=0, cex=0.5,
xlab="True count", ylab="Sketch estimate")
abline(0,1, col='grey')
meshsize <- 0.01
breaks <- seq(0,1,meshsize)
h <- hist(err, breaks=breaks, col='grey', freq=FALSE,
xlab="Over-estimate", main="")
par(mfrow=c(1,1))
plot(h$density ~ breaks[1:(length(breaks)-1)],
log='y',
type='h', col='blue', frame.plot=0)
10^10 + 7
10000000007
int(10^10 + 7)
integer(10^10 + 7)
10**10
10**10.0
as.numeric(10^10)
options(digits = 12)
10^10
options(scipen = 12)
10^10
10^10 + 7
1234 ^ 5678
n = 10^10 + 7
1234 ^ 5678 % n
1234 % n
1234 %% n
powmod
?summod
n
(1234^2) %% n
(1234^22) %% n
(1234^4) %% n
library(RColorBrewer)
dat <- read.csv("data.txt", TRUE, sep = ",",
na.strings = TRUE)
attach(dat)
mat <- rbind(Question, when, t(dat[3:5]))
col <- brewer.pal(9,"Blues")[c(8,4,2)]
#col <- heat.colors(10)[c(6,8,10)]
space <- c(0.3,0.3,3,0.3,3,0.3)
barplot(mat[3:5, 6:1],
horiz=TRUE,
space = space,
main = "",
xlab = "% response",
ylab = "",
width = 0.06,
ylim = c(0,1),
col=col,
las = 1)
text(26, 0.83, cex=1.2, labels="Do you think A is an issue for national security?")
text(28, 0.52, cex=1.2, labels=“Should X be influencing technology policy on A?")
text(21, 0.21, cex=1.2, labels="Do you think X's carbon footprint is a priority?")
axis(2, at=c(0.76,0.68,0.44,0.36,0.13,0.05),
labels=when,
tick=FALSE,
las=2)
legend("top",
pch=15,
pt.cex=2,
pt.lwd = 1,
col=col,
bty = 'o',
legend=c("Yes","Don't know","No”))
plot(1:10)
plot(1:10)
install.packages("brms")
library(brms)
?brms
1 - (5/6)^4
1 - (1 - 1/36)^24
?pbinom
dbinom(75, size=100, prob=0.85)
dbinom(50, size=100, prob=0.85)
dbinom(85, size=100, prob=0.85)
n <- 2000
k <- seq(0, n, by = 20)
plot (k, dbinom(k, n, pi/10, log = TRUE), type = "l", ylab = "log density",
main = "dbinom(*, log=TRUE) is better than  log(dbinom(*))")
lines(k, log(dbinom(k, n, pi/10)), col = "red", lwd = 2)
n <- 100
k <- seq(0, n, by = 1)
plot (k, dbinom(k, n, 0.85), type = "l",
main = "dbinom(*, log=TRUE) is better than  log(dbinom(*))")
lines(k, log(dbinom(k, n, pi/10)), col = "red", lwd = 2)
n <- 100
k <- seq(0, n, by = 1)
plot (k, dbinom(k, n, 0.85), type = "l")
0:100
k
plot (k, dbinom(k, n, 0.85), type = "l", col='blue')
choose(100,75)
p = 0.85
p^2
p^75
choose(100,75) * p^75 * (1 - p)^25
dbinom(75, 100, 0.85)
choose(1000,750) * p^750 * (1 - p)^250
n <- 100
k <- seq(0, n, by = 1)
plot (k, dbinom(k, n, 0.85), type = "l", ylim=c(0,1))
n <- 100
k <- seq(0, n, by = 1)
plot (k, dbinom(k, n, 0.85), type = "l", ylim=c(0,1), log='y')
w2v_layout <- readRDS("~/Projects/201801-wikiwords/wikiwords/shiny/data/w2v_layout.Rds")
w2v_cset <- readRDS("~/Projects/201801-wikiwords/wikiwords/shiny/data/w2v_cset.Rds")
w2v_freq <- readRDS("~/Projects/201801-wikiwords/wikiwords/shiny/data/w2v_freq.Rds")
w2v_graph <- readRDS("~/Projects/201801-wikiwords/wikiwords/shiny/data/w2v_graph.Rds")
w2v_cset <- readRDS("~/Projects/201801-wikiwords/wikiwords/shiny/data/w2v_cset.Rds")
source('~/Projects/201801-wikiwords/wikiwords/shiny/helpers.R')
runApp('201801-wikiwords/wikiwords/shiny')
runApp('201801-wikiwords/wikiwords/shiny')
runApp('201801-wikiwords/wikiwords/shiny')
shiny::runApp('201601crossent/crossent')
runApp('201703bias/bias_in_hr')
install.packages("shinyBS")
runApp('201703bias/bias_in_hr')
source('~/Projects/201808-electric-ssl/electric-ssl/expt-2.R')
runApp('201512ttest/ttest')
setwd("~/data/ebird")
library(spocc) # species occurence library
make.poly <- function(lat, long){
n <- min(length(lat), length(long))
poly <- "POLYGON(("
for(i in 1:n){
poly <- sprintf("%s%g %g", poly, long[i], lat[i])
poly <- if(i==n) sprintf("%s))", poly) else sprintf("%s, ", poly)
}
return(poly)
}
lat <- c(51.5, 51.5, 52, 52)
long <- c(-3,-2,-2,-3)
poly <- make.poly(lat, long)
wkt_vis(poly, zoom=8) # spocc function
library(rebird)
dat <- ebirdregion(loc = 'GB', back = 30)
library(RgoogleMaps)
lat <- c(51.5,52) #define our map's ylim
lon <- c(-3.0,-1.8) #define our map's xlim
center = c(mean(lat), mean(lon))  #tell what point to center on
zoom <- 10  #zoom: 1 = furthest out (entire globe), larger numbers = closer in
terrmap <- GetMap(center = center,
zoom = zoom,
maptype = "terrain",
destfile = "local.png")
zoom <- 7  # zoom: 1 = furthest out (entire globe), larger numbers = closer in
terrmap <- GetMap(center = center,
zoom = zoom,
maptype = "terrain",
markers = dat[,8:9],
destfile = "ebird.png")
library(rebird)
library(tidyverse)
# show taxonomy:
tax <- ebirdtaxonomy()
library(rebird)
library(tidyverse)
# show taxonomy:
tax <- ebirdtaxonomy()
# show extinct species in the taxonomy:
cond <- !is.na(tax$extinct)
tax.ex <- tax[cond,]
tax.ex[rev(order(tax.ex$extinctYear)),] %>% View()
extinction <- tax %>%
filter(extinct & extinctYear>0) %>%
select(comName, extinctYear) %>%
arrange(desc(extinctYear))
View(extinction)
library(spocc) # species occurence library
library(rebird)
dat <- ebirdregion(loc = 'GB', back = 30)
View(dat)
# view the trend over time:
epoch <- function(y, binsize=50){
binsize * (1 + as.integer(y / binsize))
}
ext_rate <-  extinction %>% group_by(period = epoch(extinctYear)) %>%
summarise(count = n()) %>%
arrange(desc(period))
View(ext_rate)
library(sf)
library(mapview)
( ebird_data <- ebirdregion(loc = 'GB', back = 30) )
locations <- ebird_data %>%
group_by(locName) %>%
summarise(count=n(), lat=mean(lat), lng=mean(lng))
locations_sf <- st_as_sf(locations,
coords = c("lng", "lat"),
crs = 4326)
mapview(locations_sf, cex="count")
( ebird_data <- ebirdregion(loc = 'GB', back = 30) )
View(ebird_data)
library(auk)
x <- 1;10
x <- 1:10
x
plot(x,x)
plot(x,x, pch=x)
x <- 1:15
plot(x,x, pch=x)
x <- 1:20
plot(x,x, pch=x)
plot(x,x, pch=x, col=x)
setwd("~/Projects/201801-wikiwords/wikiwords/shiny")
shiny::runApp()
install.packages("igraph")
install.packages("wordcloud")
load("data/w2v_cset.Rds")
runApp()
install.packages("wordcloud")
install.packages("shiny")
install.packages("shiny")
shiny::runApp('~/Projects/201512nfgraph/nfgraph')
library(name_UI <- function(id) {
ns <- NS(id)
tagList(
)
}
name <- function(input, output, session) {
})
library(shiny)
?sidebarPanel
?renderPrint
?nearPoints
library(tidyverse)
?str_c
str_c(leters, sep='\n')
str_c(letters, sep='\n')
str_c(letters, sep='\n')
str_c(letters, collapse='\n')
cat(str_c(letters, collapse='\n'))
cat(paste(letters, sep='\n'))
cat(paste(letters, sep='\r'))
install.packages("vcd")
